{"version":3,"sources":["serviceWorker.js","models/settings.js","utils/setting.js","models/videos.js","models/categories.js","components/video/index.js","pages/index.js","index.js"],"names":["Boolean","window","location","hostname","match","settings","state","reducers","setState","payload","Object","objectSpread","effects","dispatch","API_URL","list_videos","getList","rootState","_this","this","fetch","method","headers","Content-Type","then","res","json","success","data","console","log","catch","error","list_categories","Customer","props","context","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this$props","category","videos","objectWithoutProperties","react_default","a","createElement","class","name","className","map","e","target","href","url","src","thumbnails","title","Component","connect","getListCategories","getListVideos","components_video","assign","filter","v","categories","find","i","code","store","init","models","render","es","react_router_dom","react_router","path","pages","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6WAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECFSC,EAhBE,CACbC,MAAO,GAGPC,SAAU,CACNC,SADM,SACGF,EAAOG,GAEZ,OADAH,EAAKI,OAAAC,EAAA,EAAAD,CAAA,GAAOJ,EAAUG,GACfC,OAAAC,EAAA,EAAAD,CAAA,GAAIJ,KAGnBM,QAAS,SAACC,GAAD,MAAe,KCTfC,EAAU,8CCoCRT,EAnCE,CACbC,MAAO,CACHS,YAAa,IAEjBR,SAAU,CACNC,SADM,SACGF,EAAOG,GAEZ,OADAH,EAAKI,OAAAC,EAAA,EAAAD,CAAA,GAAOJ,EAAUG,GACfC,OAAAC,EAAA,EAAAD,CAAA,GAAIJ,KAGnBM,QAAS,SAACC,GAAD,MAAe,CACpBG,QADoB,SACZP,EAASQ,GACb,IAAMC,EAAQC,KACdC,MAAMN,EAAU,cAAe,CAC3BO,OAAQ,MACRC,QAAS,CACLC,eAAgB,sBAErBC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAClBF,KAAK,SAAUC,GACO,GAAfA,EAAIE,QACJT,EAAMV,SAAS,CAACO,YAAaU,EAAIG,OAGjCC,QAAQC,IAAIL,KAGnBM,MAAM,SAAUC,GACbH,QAAQC,IAAIE,SCOb3B,EAnCE,CACbC,MAAO,CACH2B,gBAAiB,IAErB1B,SAAU,CACNC,SADM,SACGF,EAAOG,GAEZ,OADAH,EAAKI,OAAAC,EAAA,EAAAD,CAAA,GAAOJ,EAAUG,GACfC,OAAAC,EAAA,EAAAD,CAAA,GAAIJ,KAGnBM,QAAS,SAACC,GAAD,MAAe,CACpBG,QADoB,SACZP,EAASQ,GACb,IAAMC,EAAQC,KACdC,MAAMN,EAAU,iBAAkB,CAC9BO,OAAQ,MACRC,QAAS,CACLC,eAAgB,sBAErBC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAClBF,KAAK,SAAUC,GACO,GAAfA,EAAIE,QACLT,EAAMV,SAAS,CAACyB,gBAAiBR,EAAIG,OAGpCC,QAAQC,IAAIL,KAGnBM,MAAM,SAAUC,GACbH,QAAQC,IAAIE,uEC1BtBE,2BACF,SAAAA,EAAYC,EAAOC,GAAU,OAAA1B,OAAA2B,EAAA,EAAA3B,CAAAS,KAAAe,GAAAxB,OAAA4B,EAAA,EAAA5B,CAAAS,KAAAT,OAAA6B,EAAA,EAAA7B,CAAAwB,GAAAM,KAAArB,KACnBgB,EAAOC,uHAqBR,IAAAK,EACgCtB,KAAKgB,MAAnCO,EADFD,EACEC,SAAUC,EADZF,EACYE,OADZjC,OAAAkC,EAAA,EAAAlC,CAAA+B,EAAA,uBAEL,OACII,EAAAC,EAAAC,cAAA,OAAKC,MAAM,cACPH,EAAAC,EAAAC,cAAA,UAAKL,EAASO,MAWdJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACVP,GAAUA,EAAOQ,IAAI,SAAAC,GAClB,OACIP,EAAAC,EAAAC,cAAA,OAAKC,MAAM,wBACPH,EAAAC,EAAAC,cAAA,KAAGM,OAAO,SAASC,KAAMF,EAAEG,KACvBV,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACPH,EAAAC,EAAAC,cAAA,OAAKS,IAAKJ,EAAEK,WAAaL,EAAEK,WAAW,GAAK,MAE/CZ,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eACPH,EAAAC,EAAAC,cAAA,SAAIK,EAAEM,qBA/CvBC,cAkERC,cAPE,SAAAtD,GAAK,MAAK,IAIP,SAAAO,GAAQ,MAAK,IAGlB+C,CAA+B1B,GClExCA,cACF,SAAAA,EAAYC,EAAOC,GAAU,OAAA1B,OAAA2B,EAAA,EAAA3B,CAAAS,KAAAe,GAAAxB,OAAA4B,EAAA,EAAA5B,CAAAS,KAAAT,OAAA6B,EAAA,EAAA7B,CAAAwB,GAAAM,KAAArB,KACnBgB,EAAOC,qFAGbjB,KAAKgB,MAAM0B,oBACX1C,KAAKgB,MAAM2B,iDAEN,IAAArB,EAC4CtB,KAAKgB,MAA/CF,EADFQ,EACER,gBAAiBlB,EADnB0B,EACmB1B,YAAgBoB,EADnCzB,OAAAkC,EAAA,EAAAlC,CAAA+B,EAAA,mCAEL,OACII,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACVjB,GAAmBA,EAAgBkB,IAAI,SAAAC,GACpC,OACIP,EAAAC,EAAAC,cAACgB,EAADrD,OAAAsD,OAAA,CAAOtB,SAAUU,EAAGT,OAAQ5B,EAAYkD,OAAO,SAAAC,GAAC,OAAIA,EAAEC,WAAWC,KAAK,SAAAC,GAAC,OAAIA,IAAMjB,EAAEkB,UAAYnC,cAdhGwB,aA+BRC,cATE,SAAAtD,GAAK,MAAK,CACvB2B,gBAAiB3B,EAAM6D,WAAWlC,gBAClClB,YAAaT,EAAMqC,OAAO5B,cAGV,SAAAF,GAAQ,MAAK,CAC7BgD,kBAAmBhD,EAASsD,WAAWnD,QACvC8C,cAAejD,EAAS8B,OAAO3B,UAEpB4C,CAA+B1B,GCpBxCqC,EAAQC,eAAK,CACfC,WAEJC,iBACI7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAUJ,MAAOA,GACb1B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACI/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACIhC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAOC,KAAK,IAAIJ,OAAQ,SAACvC,GAAD,OAAWU,EAAAC,EAAAC,cAACgC,EAAY5C,SAI7D6C,SAASC,eAAe,SPuGrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,KAAK,SAAA6D,GACjCA,EAAaC","file":"static/js/main.1bca3456.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const settings = {\n    state: {\n        \n    },\n    reducers: {\n        setState(state, payload) {\n            state = {...state, ...payload};\n            return {...state};\n        },\n    },\n    effects: (dispatch) => ({\n\n    })\n};\n\n\nexport default settings;","// export const API_URL = 'http://localhost:5000/api';\nexport const API_URL = 'https://extension-youtube.herokuapp.com/api'\n","import {API_URL} from '../utils/setting';\n\nconst settings = {\n    state: {\n        list_videos: []\n    },\n    reducers: {\n        setState(state, payload) {\n            state = {...state, ...payload};\n            return {...state};\n        },\n    },\n    effects: (dispatch) => ({\n        getList(payload, rootState) {\n            const _this = this;\n            fetch(API_URL + '/video/list', {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            }).then(res => res.json())\n            .then(function (res) {\n                if (res.success == 1) {\n                    _this.setState({list_videos: res.data})\n                }\n                else {\n                    console.log(res);\n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n        }\n    })\n};\n\n\nexport default settings;","import {API_URL} from '../utils/setting';\n\nconst settings = {\n    state: {\n        list_categories: []\n    },\n    reducers: {\n        setState(state, payload) {\n            state = {...state, ...payload};\n            return {...state};\n        },\n    },\n    effects: (dispatch) => ({\n        getList(payload, rootState) {\n            const _this = this;\n            fetch(API_URL + '/category/list', {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                }\n            }).then(res => res.json())\n            .then(function (res) {\n                if (res.success == 1) {\n                   _this.setState({list_categories: res.data})\n                }\n                else {\n                    console.log(res);\n                }\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n        }\n    })\n};\n\n\nexport default settings;","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport './index.scss'\nimport $ from 'jquery';\nclass Customer extends Component {\n    constructor(props, context) {\n        super(props, context)\n    }\n    componentDidMount() {\n        // $('.owl-carousel').owlCarousel({\n        //     items:1,\n        //     merge:true,\n        //     loop:true,\n        //     margin:10,\n        //     video:true,\n        //     lazyLoad:true,\n        //     center:true,\n        //     responsive:{\n        //         480:{\n        //             items:2\n        //         },\n        //         600:{\n        //             items:4\n        //         }\n        //     }\n        // })\n    }\n    render() {\n        const {category, videos, ...props} = this.props;\n        return (\n            <div class='list-video'>\n                <h1>{category.name}</h1>\n                {/* <div class=\"owl-carousel owl-theme\">\n                    <div class=\"item-video\" data-merge=\"3\"><a class=\"owl-video\" href=\"https://vimeo.com/23924346\"></a></div>\n                    <div class=\"item-video\" data-merge=\"1\"><a class=\"owl-video\" href=\"https://www.youtube.com/watch?v=JpxsRwnRwCQ\"></a></div>\n                    <div class=\"item-video\" data-merge=\"2\"><a class=\"owl-video\" href=\"https://www.youtube.com/watch?v=FBu_jxT1PkA\"></a></div>\n                    <div class=\"item-video\" data-merge=\"1\"><a class=\"owl-video\" href=\"https://www.youtube.com/watch?v=oy18DJwy5lI\"></a></div>\n                    <div class=\"item-video\" data-merge=\"2\"><a class=\"owl-video\" href=\"https://www.youtube.com/watch?v=H3jLkJrhHKQ\"></a></div>\n                    <div class=\"item-video\" data-merge=\"3\"><a class=\"owl-video\" href=\"https://www.youtube.com/watch?v=g3J4VxWIM6s\"></a></div>\n                    <div class=\"item-video\" data-merge=\"1\"><a class=\"owl-video\" href=\"https://www.youtube.com/watch?v=0fhoIate4qI\"></a></div>\n                    <div class=\"item-video\" data-merge=\"2\"><a class=\"owl-video\" href=\"https://www.youtube.com/watch?v=EF_kj2ojZaE\"></a></div>\n                </div> */}\n                <div className='row'>\n                    {videos && videos.map(e => {\n                        return (\n                            <div class='col-4 col-md-2 video'>\n                                <a target='_blank' href={e.url}>\n                                    <div class='thumbnail'>\n                                        <img src={e.thumbnails ? e.thumbnails[0] : \"\"}/>\n                                    </div>\n                                    <div class='text-center'>\n                                        <p>{e.title}</p>\n                                    </div>\n                                </a>\n                            </div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapState = state => ({\n    \n});\n\nconst mapDispatch = dispatch => ({\n    \n});\nexport default connect(mapState, mapDispatch)(Customer);\n\n\n\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\n\nimport Video from '../components/video'\nclass Customer extends Component {\n    constructor(props, context) {\n        super(props, context)\n    }\n    componentDidMount() {\n        this.props.getListCategories();\n        this.props.getListVideos()\n    }\n    render() {\n        const {list_categories, list_videos, ...props} = this.props;\n        return (\n            <div className='container py-5'>\n                {list_categories && list_categories.map(e => {\n                    return (\n                        <Video category={e} videos={list_videos.filter(v => v.categories.find(i => i === e.code))} {...props}/>\n                    )\n                })}\n            </div>\n        )\n    }\n}\n\nconst mapState = state => ({\n    list_categories: state.categories.list_categories,\n    list_videos: state.videos.list_videos\n});\n\nconst mapDispatch = dispatch => ({\n    getListCategories: dispatch.categories.getList,\n    getListVideos: dispatch.videos.getList,\n});\nexport default connect(mapState, mapDispatch)(Customer);\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { render } from 'react-dom';\n\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport { Provider } from \"react-redux\";\nimport { init } from \"@rematch/core\";\nimport * as serviceWorker from './serviceWorker';\nimport * as models from \"./models\";\nimport './index.scss';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport Content from './pages';\n\nconst store = init({\n    models\n});\nrender((\n    <Provider store={store}>\n        <BrowserRouter>\n            <Switch>\n                <Route path=\"/\" render={(props) => <Content {...props} />}/>\n            </Switch>\n        </BrowserRouter>\n    </Provider>\n), document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}